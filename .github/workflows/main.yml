name: main

on: [
  push,
  pull_request,
  workflow_dispatch,
]

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    name: Test - ${{ matrix.os }} - ${{ matrix.tox-env }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [
          ubuntu-latest-x64,
          windows-latest-x64,
          macos-latest-x64,
        ]
        tox-env: [
          py38,
          py39,
          py310,
        ]
        include:
          # create additional matrix entries for ubuntu & tox_env
          - tox-env: lint
            os: ubuntu-latest-x64
            python-version: "3.10"
            os-image: ubuntu-latest
            conda-forge-os: Linux
            conda-forge-arch: X86_64
            conda-forge-ext: sh
          - tox-env: coverage
            os: ubuntu-latest-x64
            python-version: "3.10"
            os-image: ubuntu-latest
            conda-forge-os: Linux
            conda-forge-arch: X86_64
            conda-forge-ext: sh

          # set vars for tox-env
          - tox-env: py38
            python-version: "3.8"
          - tox-env: py39
            python-version: "3.9"
          - tox-env: py310
            python-version: "3.10"

          # set vars for os & conda-forge
          - os: ubuntu-latest-x64
            os-image: ubuntu-latest
            conda-forge-os: Linux
            conda-forge-arch: X86_64
            conda-forge-ext: sh
          - os: windows-latest-x64
            os-image: windows-latest
            conda-forge-os: Windows
            conda-forge-arch: X86_64
            conda-forge-ext: exe
          - os: macos-latest-x64
            os-image: macos-latest
            conda-forge-os: MacOSX
            conda-forge-arch: X86_64
            conda-forge-ext: sh

    runs-on: ${{ matrix.os-image }}

    steps:
      - uses: actions/checkout@v1
      - name: Runner Info
        run: |
          echo OS: ${{ runner.os }}
          echo ARCH: ${{ runner.arch }}
          echo matrix:
          echo os: ${{ matrix.os }}
          echo conda-forge-os: ${{ matrix.conda-forge-os }}
          echo conda-forge-ext: ${{ matrix.conda-forge-ext }}
          echo conda-forge-arch: ${{ matrix.conda-forge-arch }}
          echo tox-env: ${{ matrix.tox-env }}
      - name: Setup miniforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          installer-url: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-${{ matrix.conda-forge-os }}-${{ matrix.conda-forge-arch }}.${{ matrix.conda-forge-ext }}
          allow-softlinks: true
          show-channel-urls: true
          auto-activate-base: false
      - name: Conda Base Info
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show

      - name: Conda Env Setup
        run: |
          sed -i.old 's/  - python=.*/  - python=${{ matrix.python-version }}/' ./conda-environment.yml
          conda env create --name work --file ./conda-environment.yml -v

      - name: Poetry Dependencies
        run: |
          conda activate work
          poetry install

      - name: Test - ${{ matrix.tox-env }}
        run: |
          conda activate work
          tox -e ${{ matrix.tox-env }}

  publish:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')

    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v1
      - name: Runner Info
        run: |
          echo OS: ${{ runner.os }}
          echo ARCH: ${{ runner.arch }}
          echo matrix:
          echo os: ${{ matrix.os }}
          echo conda-forge-os: ${{ matrix.conda-forge-os }}
          echo conda-forge-ext: ${{ matrix.conda-forge-ext }}
          echo conda-forge-arch: ${{ matrix.conda-forge-arch }}
          echo tox-env: ${{ matrix.tox-env }}
      - name: Setup miniforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          installer-url: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-X86_64.sh
          allow-softlinks: true
          show-channel-urls: true
          auto-activate-base: false
      - name: Conda Base Info
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show

      - name: Conda Env Setup
        run: |
          sed -i.old 's/  - python=.*/  - python=${{ matrix.python-version }}/' ./conda-environment.yml
          conda env create --name work --file ./conda-environment.yml -v

      - name: Poetry Dependencies
        run: |
          conda activate work
          poetry install

      - name: Build package
        run: |
          conda activate work
          poetry build

      - name: Check Version
        id: check-version
        run: |
          conda activate work
          [[ "$(echo ${{ github.ref_name  }} | sed 's/release\///g;s/\//./g')" == "$(poetry version --short)" ]] || exit 1
          echo ::set-output name=version::$(poetry version --short)
          [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
            || echo ::set-output name=prerelease::true

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          artifacts: "dist/*"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          tag: ${{ steps.check-version.outputs.version }}
          prerelease: ${{ steps.check-version.outputs.prerelease == 'true' }}

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          conda activate work
          poetry publish
