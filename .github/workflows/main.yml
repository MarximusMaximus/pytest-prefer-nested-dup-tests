name: main

on: [
  push,
  pull_request,
  workflow_dispatch,
]

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    name: Test - ${{ matrix.friendly-os }} - ${{ matrix.tox-env }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        friendly-os: [
          ubuntu-latest-x64,
          windows-latest-x64,
          macos-latest-x64,
        ]
        tox-env: [
          py38,
          py39,
          py310,
        ]
        include:
          # create additional matrix entries for ubuntu & tox_env
          - tox-env: lint
            friendly-os: ubuntu-latest-x64
            python-version: "3.10"
          - tox-env: coverage
            friendly-os: ubuntu-latest-x64
            python-version: "3.10"

          # set vars for tox-env
          - tox-env: py38
            python-version: "3.8"
          - tox-env: py39
            python-version: "3.9"
          - tox-env: py310
            python-version: "3.10"

          # set vars for os & conda-forge
          - friendly-os: ubuntu-latest-x64
            os: ubuntu-latest
            conda-forge-os: Linux
            conda-forge-arch: X86_64
            conda-forge-ext: sh
          - friendly-os: windows-latest-x64
            os: windows-latest
            conda-forge-os: Windows
            conda-forge-arch: X86_64
            conda-forge-ext: exe
          - friendly-os: macos-latest-x64
            os: macos-latest
            conda-forge-os: MacOSX
            conda-forge-arch: X86_64
            conda-forge-ext: sh

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1
      - name: Runner Info
        run: |
          echo OS: ${{ runner.os }}
          echo ARCH: ${{ runner.arch }}
          echo matrix:
          echo os: ${{ matrix.os }}
          echo conda-forge-os: ${{ matrix.conda-forge-os }}
          echo conda-forge-ext: ${{ matrix.conda-forge-ext }}
          echo conda-forge-arch: ${{ matrix.conda-forge-arch }}
          echo tox-env: ${{ matrix.tox-env }}
      - name: Setup miniforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          installer-url: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-${{ matrix.conda-forge-os }}-${{ matrix.conda-forge-arch }}.${{ matrix.conda-forge-ext }}
          allow-softlinks: true
          show-channel-urls: true
          auto-activate-base: false
      - name: Conda Base Info
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show

      - name: Conda Env Setup
        run: |
          sed -i.old 's/  - python=.*/  - python=${{ matrix.python-version }}/' ./conda-environment.yml
          conda env create --name work --file ./conda-environment.yml -v

      - name: Poetry Dependencies
        run: |
          conda activate work
          poetry install

      - name: Test
        run: |
          conda activate work
          tox -e ${{ matrix.tox-env }}


  # deploy:
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

  #   runs-on: ubuntu-latest
  #   needs: poetry

  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Python
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: "3.10"
  #   - name: Install wheel
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install wheel setuptools
  #   - name: Build package
  #     run: |
  #       python setup.py sdist bdist_wheel
  #   - name: Publish package to PyPI
  #     uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       user: __token__
  #       password: ${{ secrets.pypi_token }}
